#!/bin/sh
#

zero="0000000000000000000000000000000000000000"

update_sample() {
	# -------------------------------- update.sample ---------------------------------
	# --- Safety check
	if [ -z "$GIT_DIR" ]; then
		echo "Don't run this script from the command line." >&2
		echo " (if you want, you could supply GIT_DIR then run" >&2
		echo "  $0 <ref> <oldrev> <newrev>)" >&2
		exit 1
	fi

	if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
		echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
		exit 1
	fi

	# Config
	# ------
	# hooks.allowunannotated
	#   This boolean sets whether unannotated tags will be allowed into the
	#   repository.  By default they won't be.
	allowunannotated=""
	# hooks.allowdeletetag
	#   This boolean sets whether deleting tags will be allowed in the
	#   repository.  By default they won't be.
	allowdeletetag=""
	# hooks.allowmodifytag
	#   This boolean sets whether a tag may be modified after creation. By default
	#   it won't be.
	allowmodifytag=""
	# hooks.allowdeletebranch
	#   This boolean sets whether deleting branches will be allowed in the
	#   repository.  By default they won't be.
	allowdeletebranch=""
	# hooks.denycreatebranch
	#   This boolean sets whether remotely creating branches will be denied
	#   in the repository.  By default this is allowed.	
	denycreatebranch=""

	# --- Check types
	# if $newrev is 0000...0000, it's a commit to delete a ref.
	if [ "$newrev" = "$zero" ]; then
		newrev_type=delete
	else
		newrev_type=$(git cat-file -t $newrev)
	fi

	case "$refname","$newrev_type" in
		refs/tags/*,commit)
			# un-annotated tag
			short_refname=${refname##refs/tags/}
			if [ "$allowunannotated" != "true" ]; then
				echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
				echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
				exit 1
			fi
			;;
		refs/tags/*,delete)
			# delete tag
			if [ "$allowdeletetag" != "true" ]; then
				echo "*** Deleting a tag is not allowed in this repository" >&2
				exit 1
			fi
			;;
		refs/tags/*,tag)
			# annotated tag
			if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
			then
				echo "*** Tag '$refname' already exists." >&2
				echo "*** Modifying a tag is not allowed in this repository." >&2
				exit 1
			fi
			;;
		refs/heads/*,commit)
			# branch
			if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
				echo "*** Creating a branch is not allowed in this repository" >&2
				exit 1
			fi
			;;
		refs/heads/*,delete)
			# delete branch
			if [ "$allowdeletebranch" != "true" ]; then
				echo "*** Deleting a branch is not allowed in this repository" >&2
				exit 1
			fi
			;;
		refs/remotes/*,commit)
			# tracking branch
			;;
		refs/remotes/*,delete)
			# delete tracking branch
			if [ "$allowdeletebranch" != "true" ]; then
				echo "*** Deleting a tracking branch is not allowed in this repository" >&2
				exit 1
			fi
			;;
		*)
			# Anything else (is there anything else?)
			echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
			exit 1
			;;
	esac
	# -------------------------------- update.sample ---------------------------------
}

# --- Get commit user info
userinfo=`cat ~/user.list|grep -e "^$GL_USER"`
if [ "$userinfo" = "" ]; then
	echo "$GL_USER has no user info in database" >&2
	exit 1
fi
db_name=`echo $userinfo|cut -d '|' -f 2`
db_email=`echo $userinfo|cut -d '|' -f 3`

# --- Command line
while read oldrev newrev refname ; do
	update_sample

	case "$newrev_type" in
		tag)
			tagger=`git show $newrev|grep -e "^Tagger: "`
			if [ "Tagger: $db_name <$db_email>" != "$tagger" ]; then
				echo "Tagger is wrong, it should be $db_name <$db_email>" >&2
				exit 1
			fi
			;;
		delete)
			;;
		commit)
			# --- Check commit information
			branch=`git rev-parse --abbrev-ref $refname`
			for commit in `git rev-list $oldrev..$newrev`
			do
				message=`git log --pretty=format:'%s' $commit -1`
				username=`git log --format='%cn' $commit -1`
				email=`git log --format='%ce' $commit -1`
		
				# Check username & email
				if [ "$db_name" != "$username" ]; then
					echo "$username is not your name, it should be $db_name" >&2
					exit 1
				fi
				if [ "$db_email" != "$email" ]; then
					echo "$email is not your email, it should be $db_email" >&2
					exit 1
				fi

				#echo "message($branch): $message" >&2
			done
			;;
		*)
			# Anything else (is there anything else?)
			echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
			exit 1
			;;
	esac
done

# --- Finished
exit 0

